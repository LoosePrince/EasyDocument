name: Create Release

on:
  push:
    branches: [ main ]
    paths:
      - 'meta.json'
  workflow_dispatch:  # 允许手动触发

jobs:
  build_and_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 需要写入权限以创建release
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取完整历史以用于版本比较
      
      - name: 设置Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install gitpython
      
      - name: 提取版本信息
        id: get_version
        run: |
          VERSION=$(python -c "import json; print(json.load(open('meta.json'))['version'])")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "版本号: $VERSION"
          
          # 检查该版本是否已存在Release
          if gh release view v$VERSION &>/dev/null; then
            echo "发现Release版本v$VERSION已存在，将更新此版本"
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ github.token }}
      
      - name: 获取更新日期
        id: get_date
        run: |
          UPDATE_DATE=$(python -c "import json; print(json.load(open('meta.json')).get('updateDate', ''))")
          echo "UPDATE_DATE=$UPDATE_DATE" >> $GITHUB_ENV
      
      - name: 创建打包文件
        run: python build.py --package-all --yes
      
      - name: 读取发布说明
        id: release_notes
        run: |
          NOTES=$(python -c "import json; print(json.load(open('meta.json'))['releaseNotes'])")
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
            
      - name: 获取提交记录
        id: get_commits
        run: |
          # 获取最新的tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LATEST_TAG" ]; then
            # 如果没有之前的tag，获取所有提交
            COMMITS=$(git log --pretty=format:"- 提交 %h: %s" | head -n 10)
          else
            # 获取从上个版本到现在的提交
            COMMITS=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- 提交 %h: %s")
          fi
          
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: 删除现有Release（如果存在）
        if: steps.get_version.outputs.tag_exists == 'true'
        run: |
          gh release delete v${{ steps.get_version.outputs.version }} --yes
        env:
          GH_TOKEN: ${{ github.token }}
          
      - name: 删除现有Tag（如果存在）
        if: steps.get_version.outputs.tag_exists == 'true'
        run: |
          git push --delete origin v${{ steps.get_version.outputs.version }} || true
        env:
          GH_TOKEN: ${{ github.token }}
      
      - name: 创建Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: EasyDocument v${{ steps.get_version.outputs.version }}
          body: |
            说明：${{ steps.release_notes.outputs.notes }}
            
            ${{ steps.get_commits.outputs.commits }}
            
            更新日期: ${{ env.UPDATE_DATE }}
            
            ### 更新包（EasyDocument-update.zip）
            - 包含了此版本的所有静态文件和资源
            - 解压后可直接覆盖原有文件进行更新
            
            ### 初始包（EasyDocument-initial.zip）
            - 包含了完整的初始项目文件
            - 适合首次部署或全新安装
          files: |
            EasyDocument-update.zip
            EasyDocument-initial.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ github.token }} 